{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FileSystem from \"expo-file-system\";\nimport * as Notifications from \"expo-notifications\";\nimport * as MediaLibrary from \"expo-media-library\";\nimport * as Sharing from \"expo-sharing\";\nimport {\n  AndroidNotificationPriority,\n  NotificationContentInput,\n  NotificationRequestInput,\n} from \"expo-notifications\";\nimport { Platform } from \"react-native\";\n\nconst ios = Platform.OS === \"ios\";\nconst imageFileExts = [\n  \"jpg\",\n  \"jpeg\",\n  \"tiff\",\n  \"tif\",\n  \"raw\",\n  \"dng\",\n  \"png\",\n  \"gif\",\n  \"bmp\",\n  \"heic\",\n  \"webp\",\n];\n\nexport type EFDL_NotificationType = {\n  notification: \"managed\" | \"custom\" | \"none\";\n};\n\nexport type EDFL_NotificationContent = {\n  downloading: NotificationContentInput;\n  finished: NotificationContentInput;\n  error: NotificationContentInput;\n};\n\nexport interface EFDL_Options {\n  notificationType?: EFDL_NotificationType;\n  notificationContent?: EDFL_NotificationContent;\n  downloadProgressCallback?: FileSystem.DownloadProgressCallback;\n}\n\nexport type EDFL_NotificationState = \"downloading\" | \"finished\" | \"error\";\n\nconst baseNotificationRequestInput: NotificationRequestInput = {\n  identifier: \"\",\n  content: {\n    title: \"\",\n    body: \"\",\n    vibrate: [250],\n    priority: AndroidNotificationPriority.HIGH,\n    autoDismiss: true,\n    sticky: false,\n  },\n  trigger: {\n    channelId: \"\",\n  },\n};\n\nfunction initBaseNotificationRequestInput(\n  filename: string,\n  channelId: string\n): NotificationRequestInput {\n  let baseNotificationRI = {\n    ...baseNotificationRequestInput,\n    content: {\n      ...baseNotificationRequestInput.content,\n      title: filename,\n    },\n    trigger: {\n      channelId,\n      seconds: 1,\n      repeats: false,\n    },\n  };\n  return baseNotificationRI;\n}\n\nfunction getNotifParams(\n  baseNotificationRI: NotificationRequestInput,\n  nState: EDFL_NotificationState,\n  nContent?: EDFL_NotificationContent\n): NotificationRequestInput {\n  let identifier = \"\";\n  let body = \"\";\n  let sticky = false;\n  let customNotifContent: NotificationContentInput = {};\n  switch (nState) {\n    case \"downloading\":\n      identifier = `dl${baseNotificationRI.content.title}`;\n      body = \"Downloading...\";\n      sticky = true;\n      if (nContent !== undefined) customNotifContent = nContent.downloading;\n      break;\n    case \"finished\":\n      identifier = `fin${baseNotificationRI.content.title}`;\n      body = \"Completed!\";\n      sticky = false;\n      if (nContent !== undefined) customNotifContent = nContent.finished;\n      break;\n    case \"error\":\n      identifier = `err${baseNotificationRI.content.title}`;\n      body = \"Failed to download\";\n      sticky = false;\n      if (nContent !== undefined) customNotifContent = nContent.error;\n      break;\n    default:\n      break;\n  }\n\n  return {\n    ...baseNotificationRI,\n    identifier,\n    content: {\n      ...baseNotificationRI.content,\n      body,\n      sticky,\n      ...customNotifContent,\n    },\n  };\n}\n\nasync function dismissAndShowErr(\n  notifToDismissId: string | undefined,\n  errNotificationRI: NotificationRequestInput\n): Promise<void> {\n  if (notifToDismissId !== undefined) {\n    await Notifications.dismissNotificationAsync(notifToDismissId);\n  }\n  await Notifications.scheduleNotificationAsync(errNotificationRI);\n  return;\n}\n\nasync function downloadFile(\n  uri: string,\n  fileUri: string,\n  downloadProgressCallback?: FileSystem.DownloadProgressCallback\n) {\n  if (downloadProgressCallback) {\n    const downloadResumable = FileSystem.createDownloadResumable(\n      uri,\n      fileUri,\n      {},\n      downloadProgressCallback!\n    );\n    return await downloadResumable.downloadAsync();\n  } else {\n    return await FileSystem.downloadAsync(uri, fileUri);\n  }\n}\n\n// NOTE: This function assumes permissions have been granted and does not\n// take responsibilty for whether permissions are granted or not\n// IT WILL SILENTLY FAIL IF YOU DON'T REQUEST AND GET MEDIA_LIBRARY permissions\nexport async function downloadToFolder(\n  uri: string,\n  filename: string,\n  folder: string,\n  channelId: string,\n  options?: EFDL_Options\n): Promise<boolean> {\n  let baseNotificationRI: NotificationRequestInput = initBaseNotificationRequestInput(\n    filename,\n    channelId\n  );\n  const customNotifContent =\n    options &&\n    options.notificationType &&\n    options.notificationType.notification === \"custom\"\n      ? options.notificationContent\n      : undefined;\n  const skipNotifications =\n    options &&\n    options.notificationType &&\n    options.notificationType.notification === \"none\";\n  const dlNotificationRI: NotificationRequestInput = getNotifParams(\n    baseNotificationRI,\n    \"downloading\",\n    customNotifContent\n  );\n  const errNotificationRI: NotificationRequestInput = getNotifParams(\n    baseNotificationRI,\n    \"error\",\n    customNotifContent\n  );\n  const finNotificationRI: NotificationRequestInput = getNotifParams(\n    baseNotificationRI,\n    \"finished\",\n    customNotifContent\n  );\n\n  if (!skipNotifications)\n    await Notifications.scheduleNotificationAsync(dlNotificationRI);\n\n  const fileUri: string = `${FileSystem.documentDirectory}${filename}`;\n  const downloadedFile: FileSystem.FileSystemDownloadResult | undefined = await downloadFile(\n    uri,\n    fileUri,\n    options?.downloadProgressCallback\n  );\n\n  if (!downloadedFile || downloadedFile.status != 200) {\n    if (!skipNotifications)\n      await dismissAndShowErr(dlNotificationRI.identifier, errNotificationRI);\n    return false;\n  }\n\n  try {\n    // if this is not an image file on iOS\n    // we use \"Sharing\" library and quit early (let iOS handle it)\n    if (\n      ios &&\n      imageFileExts.every(\n        (x) => !downloadedFile.uri.toLocaleLowerCase().endsWith(x)\n      )\n    ) {\n      const UTI = \"public.item\";\n      const shareResult = await Sharing.shareAsync(downloadedFile.uri, {\n        UTI,\n      });\n      return true;\n    }\n\n    // the file is either a photo on iOS or any file type on Android\n    // in which case we can download the file directly to the Download folder\n    const asset = await MediaLibrary.createAssetAsync(downloadedFile.uri);\n    const album = await MediaLibrary.getAlbumAsync(folder);\n    if (album == null) {\n      await MediaLibrary.createAlbumAsync(folder, asset, false);\n    } else {\n      await MediaLibrary.addAssetsToAlbumAsync([asset], album, false);\n    }\n  } catch (e) {\n    console.log(`ERROR: ${e}`);\n    if (!skipNotifications)\n      await dismissAndShowErr(dlNotificationRI.identifier, errNotificationRI);\n    return false;\n  }\n\n  if (skipNotifications) {\n    return true;\n  } else {\n    if (dlNotificationRI.identifier !== undefined) {\n      await Notifications.dismissNotificationAsync(dlNotificationRI.identifier);\n    }\n    await Notifications.scheduleNotificationAsync(finNotificationRI);\n    return true;\n  }\n}\n"]}